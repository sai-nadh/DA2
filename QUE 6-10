DIGITAL ASSIGNMENT

NAME: YERRAMSETTI SAINADH
REG NO: 22BRS1001

1.
The temperature in Chennai exists somewhere between 280C to 330C in a particular week. The temperature in Delhi is 8 0C lesser than in Chennai. Likewise, the temperature in Haveri is 5 0C more than that of Chennai. Write a C program to find the temperature of Gangtok for a particular week, which is the temperature difference between Delhi and Haveri. Get the temperature of Chennai ( 0C) as input for the week of 7 days and the temperature of Gangtok ( 0C) as output for the week of 7 days. Implement the program using arrays and validate the rules.

#include <stdio.h>

int main() {
    float chennai[7], delhi[7], haveri[7], gangtok[7];
    float chennaiTemp, gangtokTemp, delhiTemp, haveriTemp;
    int i;

    printf("Enter the temperature in Chennai for the week:\n");
    for (i = 0; i < 7; i++) {
        printf("Day %d: ", i+1);
        scanf("%f", &chennai[i]);
    }

    for (i = 0; i < 7; i++) {
        delhi[i] = chennai[i] - 8.0;
        haveri[i] = chennai[i] + 5.0;
    }

    for (i = 0; i < 7; i++) {
        gangtok[i] = haveri[i] - delhi[i];
    }

    chennaiTemp = delhiTemp = haveriTemp = gangtokTemp = 0.0;
    for (i = 0; i < 7; i++) {
        chennaiTemp += chennai[i];
        delhiTemp += delhi[i];
        haveriTemp += haveri[i];
        gangtokTemp += gangtok[i];
    }
    chennaiTemp /= 7.0;
    delhiTemp /= 7.0;
    haveriTemp /= 7.0;
    gangtokTemp /= 7.0;

    printf("\nAverage temperatures for the week:\n");
    printf("Chennai: %.2f C\n", chennaiTemp);
    printf("Delhi: %.2f C\n", delhiTemp);
    printf("Haveri: %.2f C\n", haveriTemp);
    printf("Gangtok: %.2f C\n", gangtokTemp);

    return 0;
}

2.
Samantha is an avid collector of lucky numbers. She believes that each number has its own unique energy and can bring good luck if used correctly. One day, she came across a new number that had a mysterious aura and she could not resist finding out more about it. She heard that the number may fall within the digit combinations, so she decided to sum up all the four-digit even numbers and then keep adding the digits of the summation until a single digit is found to unlock its secrets. Later, she must check again whether the single digit is odd or even. If odd, then you must say “Odd Found” otherwise you must return “Even found”. Write a C program to help her in finding the mysterious number.

#include <stdio.h>

int getSumOfDigits(int num);
int isOdd(int num);

int main() {
    int sum = 0;
    int numCount = 0;

    for(int i = 1000; i <= 9998; i += 2) {

        sum += i;
        numCount++;
    }

    while(sum > 9) {
        sum = getSumOfDigits(sum);
    }

    if(isOdd(sum)) {
        printf("Odd Found\n");
    } else {
        printf("Even Found\n");
    }
    
    printf("Total even four-digit numbers: %d", numCount);
    
    return 0;
}

int getSumOfDigits(int num) {
    int sum = 0;
    while(num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int isOdd(int num) {
    if(num % 2 == 1) {
        return 1;
    } else {
        return 0;
    }
}

3.
A digital locker in the bank is protected with a security mechanism. To open the locker a password of 9 characters is required. The input characters should be accepted as 3x3 matrix and two diagonal characters of the matrix are concatenated (refer to the example given below) and compared with the password already stored in a character array for authentication. Write a C program to implement this logic for password verification. 
Input to open the device
 a b c
 d e f
 g h i
Concatenation of Diagonal characters:
 aeiceg


#include <stdio.h>
#include <string.h>

#define PASSWORD "123456789" 

int main() {
    char matrix[3][3]; 
    char diagonal[2]; 
    printf("Enter a 3x3 matrix:\n");
    for(int i = 0; i < 3; i++) {
        for(int j = 0; j < 3; j++) {
            scanf(" %c", &matrix[i][j]);
        }
    }
    diagonal[0] = matrix[0][0];
    diagonal[1] = matrix[1][1];
    diagonal[2] = '\0'
    if(strcmp(diagonal, PASSWORD) == 0) {
        printf("Password accepted!\n");
    } else {
        printf("Password incorrect!\n");
    }

    return 0;
}

4.
An international school of class 7 with a class strength of 25, decided to assign additional marks for their students in Maths subject, to increase their class average. The additional marks were given to each student based on their month of birth. That is she was to give that number (month of birth) as the booster marks. The teacher wants to find the class average for the original marks as well as for the revised marks. She 10 marks wants to decide whether to implement this revision in marks or not based on the significant improvement in the class average. Write a C program to help the teacher get the class average for the original marks as well as the revised marks. She wants to know whether to implement this revision or not. This is decided based on the condition that the revision should bring a significant increase in the class average of 5 marks. Else, she is not planning to implement this revision in the marks strategy. Write the program to display this decision of “Can implement – Significant increase in class average” or “Need not implement – No significant increase in class average”. Keep every operation in this program separate. Get the students’ original marks and the month of their birth as input

#include <stdio.h>

int main() {
    int original_marks[25], revised_marks[25], birth_month[25];
    int original_total = 0, revised_total = 0;
    float original_average, revised_average;
    int i;

    printf("Enter the students' original marks and month of birth:\n");
    for (i = 0; i < 25; i++) {
        printf("Student %d: ", i+1);
        scanf("%d %d", &original_marks[i], &birth_month[i]);

        revised_marks[i] = original_marks[i] + birth_month[i];
        revised_total += revised_marks[i];

        original_total += original_marks[i];
    }

    original_average = (float) original_total / 25;
    revised_average = (float) revised_total / 25;

    if (revised_average - original_average >= 5) {
        printf("Can implement - Significant increase in class average\n");
    } else {
        printf("Need not implement - No significant increase in class average\n");
    }

    return 0;
}

5.
Paul is provided with a number “x” whose scope will remain throughout the program. Using the concept of recursion, help Paul to write a “C program” for finding the value of (x)n where n should be less than or equal to 5

#include <stdio.h>
int power(int x, int n);
int main() {
    int x, n, result;
    printf("Enter a value for x: ");
    scanf("%d", &x);
    printf("Enter a value for n (less than or equal to 5): ");
    scanf("%d", &n);
    result = power(x, n);
    printf("%d raised to the power of %d is %d\n", x, n, result);
    return 0;
}
int power(int x, int n) {
    if (n == 0) {
        return 1;
    } else if (n == 1) {
        return x;
    } else {
        return x * power(x, n-1);
    }
}
